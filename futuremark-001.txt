
root@~:build64# 
root@~:build64# 
root@~:build64# git status
位于分支 v1.x
您的分支与上游分支 'origin/v1.x' 一致。

尚未暂存以备提交的变更：
  （使用 "git add <文件>..." 更新要提交的内容）
  （使用 "git checkout -- <文件>..." 丢弃工作区的改动）

        修改：     ../renderdoc/android/android.cpp
        修改：     ../renderdoc/android/jdwp.cpp
        修改：     ../renderdoc/driver/gl/egl_hooks.cpp
        修改：     ../renderdoc/driver/gl/gl_hooks.cpp
        修改：     ../renderdoc/driver/gl/wrappers/gl_get_funcs.cpp

未跟踪的文件:
  （使用 "git add <文件>..." 以包含要提交的内容）

        ../build32/
        ./

修改尚未加入提交（使用 "git add" 和/或 "git commit -a"）
root@~:build64# git diff ../renderdoc/android/android.cpp
diff --git a/renderdoc/android/android.cpp b/renderdoc/android/android.cpp
old mode 100644
new mode 100755
index f4689754b..4d1196e23
--- a/renderdoc/android/android.cpp
+++ b/renderdoc/android/android.cpp
@@ -59,6 +59,17 @@ void adbForwardPorts(uint16_t portbase, const rdcstr &deviceID, uint16_t jdwpPor
     adbExecCommand(deviceID, StringFormat::Fmt("forward tcp:%hu jdwp:%i", jdwpPort, pid));
 }
 
+void adbForwardPorts2(uint16_t portbase, const rdcstr &deviceID, uint16_t jdwpPort, int pid,
+    bool silent)
+{
+    const char *forwardCommand = "forward tcp:%i localabstract:renderdoc_%i";
+
+    adbExecCommand(deviceID,
+        StringFormat::Fmt(forwardCommand, portbase + RenderDoc_ForwardTargetControlOffset + 1,
+            RenderDoc_FirstTargetControlPort + 1),
+        ".", silent);
+}
+
 uint16_t GetJdwpPort()
 {
   // we loop over a number of ports to try and avoid previous failed attempts from leaving sockets
@@ -956,6 +967,11 @@ struct AndroidController : public IDeviceProtocolHandler
     // we only support a single target control connection on android
     else if(srcPort == RenderDoc_FirstTargetControlPort)
       return portbase + RenderDoc_ForwardTargetControlOffset;
+    else if (srcPort == RenderDoc_FirstTargetControlPort + 1)
+    {
+        Android::adbForwardPorts2(38960, deviceID, 0, 0, true);
+        return portbase + RenderDoc_ForwardTargetControlOffset + 1;
+    }
 
     return 0;
   }
root@~:build64# git diff ../renderdoc/android/jdwp.cpp
diff --git a/renderdoc/android/jdwp.cpp b/renderdoc/android/jdwp.cpp
old mode 100644
new mode 100755
index 488b82f5e..8beefa587
--- a/renderdoc/android/jdwp.cpp
+++ b/renderdoc/android/jdwp.cpp
@@ -377,11 +377,12 @@ bool InjectLibraries(const rdcstr &deviceID, Network::Socket *sock)
     if(evData.eventKind == EventKind::MethodEntry)
       thread = evData.MethodEntry.thread;
   }
+ /*
 
-  if(thread == 0)
+  if (thread == 0)
   {
-    RDCERR("Didn't hit android.app.Application.onCreate()");
-    return false;
+      RDCERR("Didn't hit android.app.Application.onCreate()");
+      return false;
   }
 
   // find java.lang.Runtime
@@ -424,7 +425,7 @@ bool InjectLibraries(const rdcstr &deviceID, Network::Socket *sock)
     RDCERR("Failed to call load(%s/%s)!", libPath.c_str(), RENDERDOC_ANDROID_LIBRARY);
     return false;
   }
-
+ */
   return true;
 }
 };    // namespace JDWP
root@~:build64# git diff ../renderdoc/driver/gl/egl_hooks.cpp
diff --git a/renderdoc/driver/gl/egl_hooks.cpp b/renderdoc/driver/gl/egl_hooks.cpp
old mode 100644
new mode 100755
index a6af89cfb..01a476d80
--- a/renderdoc/driver/gl/egl_hooks.cpp
+++ b/renderdoc/driver/gl/egl_hooks.cpp
@@ -229,6 +229,7 @@ HOOK_EXPORT EGLContext EGLAPIENTRY eglCreateContext_renderdoc_hooked(EGLDisplay
                                                                      EGLContext shareContext,
                                                                      EGLint const *attribList)
 {
+    EGLConfig tmpConfig = config;
   if(RenderDoc::Inst().IsReplayApp())
   {
     if(!EGL.CreateContext)
@@ -319,12 +320,27 @@ HOOK_EXPORT EGLContext EGLAPIENTRY eglCreateContext_renderdoc_hooked(EGLDisplay
   init.height = 0;
 
   EGLint value;
-  EGL.GetConfigAttrib(display, config, EGL_BUFFER_SIZE, &value);
+  EGL.GetConfigAttrib(display, tmpConfig, EGL_BUFFER_SIZE, &value);
   init.colorBits = value;
-  EGL.GetConfigAttrib(display, config, EGL_DEPTH_SIZE, &value);
+  if (init.colorBits > 32)
+  {
+      RDCLOG("process eglCreateContext_renderdoc_hooked() colorBits=%d, errno=%d", init.colorBits, EGL.GetError());
+  }
+
+  EGL.GetConfigAttrib(display, tmpConfig, EGL_DEPTH_SIZE, &value);
   init.depthBits = value;
-  EGL.GetConfigAttrib(display, config, EGL_STENCIL_SIZE, &value);
+  if (init.depthBits > 32)
+  {
+      RDCLOG("process eglCreateContext_renderdoc_hooked() depthBits=%d, errno=%d", init.depthBits, EGL.GetError());
+  }
+
+  EGL.GetConfigAttrib(display, tmpConfig, EGL_STENCIL_SIZE, &value);
   init.stencilBits = value;
+  if (init.stencilBits > 32)
+  {
+      RDCLOG("process eglCreateContext_renderdoc_hooked() depthBits=%d, errno=%d", init.stencilBits, EGL.GetError());
+  }
+
   // We will set isSRGB when we see the surface.
   init.isSRGB = 0;
 
root@~:build64# git diff ../renderdoc/driver/gl/gl_hooks.cpp
diff --git a/renderdoc/driver/gl/gl_hooks.cpp b/renderdoc/driver/gl/gl_hooks.cpp
old mode 100644
new mode 100755
root@~:build64# 