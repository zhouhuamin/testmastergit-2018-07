    JNI编程入门
1. 编写最简单的java程序
    1  public class HelloCpp {
    2      public static void main(String[] args)
    3      {
    4          System.out.println("Hello from Java!");
    5      }
    6  }
2. 声明一个用其他语言编写的java方法, 使用native关键字并忽略实现
       public static native void callCpp();

3. 在Java程序中动态加载共享库，在Linux系统上为libhellocpp.so, 在Windows系统上指定为hellocpp.dll
       static {
           System.loadLibrary("hellocpp");
       }
     
4. 在Java程序中实际调用C++代码
      callCpp();
    
    最终的代码如下：
     1  public class HelloCpp {
     2
     3      static {
     4          System.loadLibrary("hellocpp");
     5      }
     6
     7      // This will be implemented in C++
     8      public static native void callCpp();
     9
    10      public static void main(String[] args)
    11      {
    12          System.out.println("Hello from Java!");
    13          callCpp();
    14      }
    15  }
    
5. 编译Java程序:
    javac HelloCpp.java

6. 用命令[javah HelloCpp]为本地方法创建头文件
     1  /* DO NOT EDIT THIS FILE - it is machine generated */
     2  #include <jni.h>
     3  /* Header for class HelloCpp */
     4
     5  #ifndef _Included_HelloCpp
     6  #define _Included_HelloCpp
     7  #ifdef __cplusplus
     8  extern "C" {
     9  #endif
    10  /*
    11   * Class:     HelloCpp
    12   * Method:    callCpp
    13   * Signature: ()V
    14   */
    15  JNIEXPORT void JNICALL Java_HelloCpp_callCpp
    16    (JNIEnv *, jclass);
    17
    18  #ifdef __cplusplus
    19  }
    20  #endif
    21  #endif

7. 编写C++函数
     1  #include <jni.h>
     2  #include "HelloCpp.h"
     3  #include <iostream>
     4
     5  JNIEXPORT void JNICALL Java_HelloCpp_callCpp(JNIEnv*, jclass)
     6  {
     7    std::cout << "Hello from C++!" << std::endl;
     8  }    
    
8. 在Linux上编译为共享库
    g++ -shared -fPIC -I/opt/jdk1.8.0_172/include/ -I/opt/jdk1.8.0_172/include/linux/ HelloCpp.cpp -o libhellocpp.so
9. 执行Java程序
    java HelloCpp 
10. 结果：
Hello from Java!
Hello from C++!
    
10. 总结
下面是java中的原始类型和本地方法中的类型的对应：
Java类型　　   本地类型　　   字节(bit)
boolean　　     jboolean　　   8, unsigned
byte　　　　    jbyte　　　　  8
char　　　　    jchar　　　　  16, unsigned
short　　　     jshort　　　   16
int　　　　     jint　　　　   32
long　　　　    jlong　　　　  64
float　　　     jfloat　　　   32
double　　　    jdouble　　　  64
void　　　　    void　　　　   n/a　