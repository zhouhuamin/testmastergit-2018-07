0. input command
adb -s 17d6ca25 shell dumpsys package com.bn.bullet7111
Activity Resolver Table:
  Non-Data Actions:
      android.intent.action.MAIN:
        6a8b3b2 com.bn.bullet7111/com.bn.bullet.BasketBulletActivity filter 5551b40
          Action: "android.intent.action.MAIN"
          Category: "android.intent.category.LAUNCHER"

Key Set Manager:
  [com.bn.bullet7111]
      Signing KeySets: 59

Packages:
  Package [com.bn.bullet7111] (a40ef03):
    userId=10179
    pkg=Package{5cade80 com.bn.bullet7111}
    codePath=/data/app/com.bn.bullet7111-iR1OHiI3H-oP8JWHXQ_1fA==
    resourcePath=/data/app/com.bn.bullet7111-iR1OHiI3H-oP8JWHXQ_1fA==
    legacyNativeLibraryDir=/data/app/com.bn.bullet7111-iR1OHiI3H-oP8JWHXQ_1fA==/lib
    primaryCpuAbi=armeabi
    secondaryCpuAbi=null
    versionCode=1 minSdk=20 targetSdk=20
    versionName=1.0
    splits=[base]
    apkSigningVersion=1
    applicationInfo=ApplicationInfo{e2becb9 com.bn.bullet7111}
    flags=[ DEBUGGABLE HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]
    dataDir=/data/user/0/com.bn.bullet7111
    supportsScreens=[small, medium, large, xlarge, resizeable, anyDensity]
    timeStamp=2018-11-18 21:01:22
    firstInstallTime=2018-11-18 21:01:22
    lastUpdateTime=2018-11-18 21:01:22
    signatures=PackageSignatures{aea58fe [36689622]}
    installPermissionsFixed=true
    pkgFlags=[ DEBUGGABLE HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]
    requested permissions:
      android.permission.WRITE_EXTERNAL_STORAGE
      android.permission.MOUNT_UNMOUNT_FILESYSTEMS
      android.permission.READ_EXTERNAL_STORAGE
    install permissions:
      android.permission.READ_EXTERNAL_STORAGE: granted=true
      android.permission.WRITE_EXTERNAL_STORAGE: granted=true
    User 0: ceDataInode=51791 installed=true hidden=false suspended=false stopped=true notLaunched=false enabled=0 instant=false virtual=false
      runtime permissions:

Dexopt state:
  [com.bn.bullet7111]
    path: /data/app/com.bn.bullet7111-iR1OHiI3H-oP8JWHXQ_1fA==/base.apk
      arm: /data/app/com.bn.bullet7111-iR1OHiI3H-oP8JWHXQ_1fA==/oat/arm/base.odex[status=kOatUpToDate, compilation_filte
      r=speed-profile]


Compiler stats:
  [com.bn.bullet7111]
     base.apk - 1413

adb -s 17d6ca25 shell dumpsys package com.antutu.benchmark.full
Activity Resolver Table:
  Non-Data Actions:
      android.intent.action.MAIN:
        c63b044 com.antutu.benchmark.full/.MainActivity filter e833ae0
          Action: "android.intent.action.MAIN"
          Category: "android.intent.category.LAUNCHER"
          Category: "android.intent.category.LEANBACK_LAUNCHER"
      com.antutu.benchmark.full.3D_RUN:
        ebef52d com.antutu.benchmark.full/.UnityPlayerActivity filter 3108199
          Action: "com.antutu.benchmark.full.3D_RUN"
      com.antutu.benchmark.full.RUN_3D:
        3d04a62 com.antutu.benchmark.full/.TransferActivity filter ad9fc5e
          Action: "com.antutu.benchmark.full.RUN_3D"

Key Set Manager:
  [com.antutu.benchmark.full]
      Signing KeySets: 82

Packages:
  Package [com.antutu.benchmark.full] (25b7f3):
    userId=10207
    pkg=Package{70d8cb0 com.antutu.benchmark.full}
    codePath=/data/app/com.antutu.benchmark.full-JQDNlkPIgyc7eBGW9jeDrQ==
    resourcePath=/data/app/com.antutu.benchmark.full-JQDNlkPIgyc7eBGW9jeDrQ==
    legacyNativeLibraryDir=/data/app/com.antutu.benchmark.full-JQDNlkPIgyc7eBGW9jeDrQ==/lib
    primaryCpuAbi=armeabi-v7a
    secondaryCpuAbi=null
    versionCode=70005000 minSdk=16 targetSdk=26
    versionName=7.0.5
    splits=[base]
    apkSigningVersion=2
    applicationInfo=ApplicationInfo{3f880a2 com.antutu.benchmark.full}
    flags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP LARGE_HEAP ]
    privateFlags=[ PRIVATE_FLAG_ACTIVITIES_RESIZE_MODE_RESIZEABLE_VIA_SDK_VERSION ]
    dataDir=/data/user/0/com.antutu.benchmark.full
    supportsScreens=[small, medium, large, xlarge, resizeable, anyDensity]
    timeStamp=2018-12-15 10:16:37
    firstInstallTime=2018-12-15 10:16:39
    lastUpdateTime=2018-12-15 10:16:39
    installerPackageName=com.xiaomi.market
    signatures=PackageSignatures{1c2b729 [4ad2629]}
    installPermissionsFixed=true
    pkgFlags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP LARGE_HEAP ]
    requested permissions:
      android.permission.INTERNET
      com.android.launcher.permission.UNINSTALL_SHORTCUT
    install permissions:
      com.android.launcher.permission.UNINSTALL_SHORTCUT: granted=true
      android.permission.INTERNET: granted=true
    User 0: ceDataInode=108934 installed=true hidden=false suspended=false stopped=false notLaunched=false enabled=0 instant=false virtual=false
      lastDisabledCaller: com.xiaomi.market
      gids=[3003]
      runtime permissions:


Dexopt state:
  [com.antutu.benchmark.full]
    path: /data/app/com.antutu.benchmark.full-JQDNlkPIgyc7eBGW9jeDrQ==/base.apk
      arm: /data/app/com.antutu.benchmark.full-JQDNlkPIgyc7eBGW9jeDrQ==/oat/arm/base.odex[status=kOatUpToDate, compilati
      on_filter=speed-profile]


Compiler stats:
  [com.antutu.benchmark.full]
     base.apk - 1791


1. renderdoc/renderdoc/renderdoc/os/posix/android/android_stringio.cpp
// For RenderDoc's apk, this returns our package name
// For other APKs, we use it to get the writable temp directory.
void GetExecutableFilename(string &selfName)
{
    RDCERR("Enter GetExecutableFilename()===========================================");
  char buf[4096];
  snprintf(buf, sizeof(buf), "/proc/%u/cmdline", getpid());
  int fd = open(buf, O_RDONLY);
  if(fd < 0)
  {
    return;
  }
  ssize_t len = read(fd, buf, sizeof(buf));
  close(fd);
  if(len < 0 || len == sizeof(buf))
  {
    return;
  }
    std::string tmpSelfName = buf;
    if (tmpSelfName == "com.antutu.benchmark.full:unity")
        selfName = "com.antutu.benchmark.full";
    else
        selfName = buf;
  RDCERR("Leave GetExecutableFilename()===========================================: %s", buf);
}


2. renderdoc/renderdoc/android/android.cpp

std::string GetDefaultActivityForPackage(const std::string &deviceID, const std::string &packageName)
{
  Process::ProcessResult activity =
      adbExecCommand(deviceID, StringFormat::Fmt("shell cmd package resolve-activity"
                                                 " -c android.intent.category.LAUNCHER %s",
                                                 packageName.c_str()));

  if(activity.strStdout.empty())
  {
    RDCERR("Failed to resolve default activity of APK. STDERR: %s", activity.strStderror.c_str());
    return "";
  }

  std::vector<std::string> lines;
  if (packageName != "com.antutu.benchmark.full")
  {
      split(activity.strStdout, lines, '\n');

      for(std::string &line : lines)
      {
        line = trim(line);

        if(!strncmp(line.c_str(), "name=", 5))
        {
          return line.substr(5);
        }
      }
  }


  // when failed to find default activiy with cmd package on Android 6.0
  // try using pm dump like in this example:
  // $ adb shell pm dump com.android.gles3jni
  // DUMP OF SERVICE package:
  //  Activity Resolver Table:
  //    Non-Data Actions:
  //        android.intent.action.MAIN:
  //          d97b36a com.android.gles3jni/.GLES3JNIActivity filter fa39fb9
  // ...

  activity = adbExecCommand(deviceID, StringFormat::Fmt("shell pm dump %s", packageName.c_str()));

  lines.clear();
  split(activity.strStdout, lines, '\n');

  size_t numOfLines = lines.size();
  // const char *intentFilter = "android.intent.action.MAIN:";
  std::string intentFilter = "android.intent.action.MAIN:";
  if (packageName == "com.antutu.benchmark.full")
  {
      // com.antutu.benchmark.full.RUN_3D: com.antutu.benchmark.full/.TransferActivity
      // com.antutu.benchmark.full.RUN_3D: com.antutu.benchmark.full/.UnityPlayerActivity
      intentFilter = "com.antutu.benchmark.full.3D_RUN:";
  }
  size_t intentFilterSize = strlen(intentFilter.c_str());

  for(size_t idx = 0; idx < numOfLines; idx++)
  {
    std::string line = trim(lines[idx]);
    if(!strncmp(line.c_str(), intentFilter.c_str(), intentFilterSize) && idx + 1 < numOfLines)
    {
      std::string activityName = trim(lines[idx + 1]);
      size_t startPos = activityName.find("/");
      if(startPos == std::string::npos)
      {
        RDCWARN("Failed to find default activity");
        return "";
      }
      size_t endPos = activityName.find(" ", startPos + 1);
      if(endPos == std::string::npos)
      {
        endPos = activityName.length();
      }
      return activityName.substr(startPos + 1, endPos - startPos - 1);
    }
  }

  RDCERR("Didn't find default activity in adb output");
  return "";
}


