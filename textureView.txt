void TextureViewer::OnEventChanged(uint32_t eventId)
{
  // add by zhouhm
  on_saveTex_clicked();
  // add end
}


int WrappedOpenGL::SnapshotDraw()
{
  // add by zhouhm
  {
      const uint16_t maxSize = 2048;
      RenderDoc::FramePixels *fp = new RenderDoc::FramePixels();

      if(GL.glGetIntegerv && GL.glReadBuffer && GL.glBindFramebuffer && GL.glBindBuffer &&
         GL.glReadPixels)
      {
        RDCGLenum prevReadBuf = eGL_BACK;
        GLint prevBuf = 0;
        GLint packBufBind = 0;
        GLint prevPackRowLen = 0;
        GLint prevPackSkipRows = 0;
        GLint prevPackSkipPixels = 0;
        GLint prevPackAlignment = 0;
        GL.glGetIntegerv(eGL_READ_BUFFER, (GLint *)&prevReadBuf);
        GL.glGetIntegerv(eGL_READ_FRAMEBUFFER_BINDING, &prevBuf);
        GL.glGetIntegerv(eGL_PIXEL_PACK_BUFFER_BINDING, &packBufBind);
        GL.glGetIntegerv(eGL_PACK_ROW_LENGTH, &prevPackRowLen);
        GL.glGetIntegerv(eGL_PACK_SKIP_ROWS, &prevPackSkipRows);
        GL.glGetIntegerv(eGL_PACK_SKIP_PIXELS, &prevPackSkipPixels);
        GL.glGetIntegerv(eGL_PACK_ALIGNMENT, &prevPackAlignment);

        GL.glBindFramebuffer(eGL_READ_FRAMEBUFFER, m_CurrentDefaultFBO);
        GL.glReadBuffer(eGL_BACK);
        GL.glBindBuffer(eGL_PIXEL_PACK_BUFFER, 0);
        GL.glPixelStorei(eGL_PACK_ROW_LENGTH, 0);
        GL.glPixelStorei(eGL_PACK_SKIP_ROWS, 0);
        GL.glPixelStorei(eGL_PACK_SKIP_PIXELS, 0);
        GL.glPixelStorei(eGL_PACK_ALIGNMENT, 1);

        ContextData &dat = GetCtxData();
        dat.initParams.width = 1080;
        dat.initParams.height = 2160;

        fp->width = dat.initParams.width;
        fp->height = dat.initParams.height;
        fp->bpc = 1;
        fp->stride = fp->bpc * 4;
        fp->pitch = dat.initParams.width * fp->stride;
        fp->max_width = maxSize;
        fp->pitch_requirement = 4;
        fp->len = (uint32_t)fp->pitch * fp->height;
        fp->data = new uint8_t[fp->len];
        fp->is_y_flipped = dat.initParams.isYFlipped;

        // GLES only supports GL_RGBA
        GL.glReadPixels(0, 0, fp->width, fp->height, eGL_RGBA, eGL_UNSIGNED_BYTE, fp->data);

        GL.glBindBuffer(eGL_PIXEL_PACK_BUFFER, packBufBind);
        GL.glBindFramebuffer(eGL_READ_FRAMEBUFFER, prevBuf);
        GL.glReadBuffer(prevReadBuf);
        GL.glPixelStorei(eGL_PACK_ROW_LENGTH, prevPackRowLen);
        GL.glPixelStorei(eGL_PACK_SKIP_ROWS, prevPackSkipRows);
        GL.glPixelStorei(eGL_PACK_SKIP_PIXELS, prevPackSkipPixels);
        GL.glPixelStorei(eGL_PACK_ALIGNMENT, prevPackAlignment);
      }

      //if (type == 1)
      {
        RDCThumb outRaw, outPng;
        if(fp->data)
        {
          // point sample info into raw buffer
           RenderDoc::Inst().ResamplePixels(*fp, outRaw);
           RenderDoc::Inst().EncodePixelsPNG(outRaw, outPng);

           BinaryThumbnail2 thumbHeader = {0};

           thumbHeader.width = outPng.width;
           thumbHeader.height = outPng.height;
           const byte *jpgPixels = outPng.pixels;
           thumbHeader.length = outPng.len;

           byte *jpgBuffer = NULL;
           if(outPng.format != FileType::JPG && outPng.width > 0 && outPng.height > 0)
          {
            // the primary thumbnail must be in JPG format, must perform conversion
            const byte *rawPixels = NULL;
            byte *rawBuffer = NULL;
            int w = (int)outPng.width;
            int h = (int)outPng.height;
            int comp = 3;

            if(outPng.format == FileType::Raw)
            {
  	        rawPixels = outPng.pixels;
            }
            else
            {
  	        rawBuffer = stbi_load_from_memory(outPng.pixels, (int)outPng.len, &w, &h, &comp, 3);
  	        rawPixels = rawBuffer;
            }

            if(rawPixels)
            {
  	        int len = w * h * comp;
  	        jpgBuffer = new byte[len];
  	        jpge::params p;
  	        p.m_quality = 90;
  	        jpge::compress_image_to_jpeg_file_in_memory(jpgBuffer, len, w, h, comp, rawPixels, p);
  	        thumbHeader.length = (uint32_t)len;
  	        jpgPixels = jpgBuffer;
            }
            else
            {
  	        thumbHeader.width = 0;
  	        thumbHeader.height = 0;
  	        thumbHeader.length = 0;
  	        jpgPixels = NULL;
            }
            if(rawBuffer)
  	        stbi_image_free(rawBuffer);
          }

          {
  	        if (thumbHeader.length > 0)
  	        {
  		          static int nSeq = 0;
  		          char szFileName[256] = {0};
  		          snprintf(szFileName, sizeof(szFileName),"E:\\pics\\%d.png", nSeq++);
                  //  snprintf(szFileName, sizeof(szFileName), "/%d.png", nSeq++);
  		          FILE *pFile = FileIO::fopen(szFileName, "wb");
  		          FileIO::fwrite(jpgPixels, 1, thumbHeader.length, pFile);
  		          FileIO::fclose(pFile);
  	        }

  	        delete[] jpgBuffer;
          }
          SAFE_DELETE_ARRAY(outRaw.pixels);
          SAFE_DELETE_ARRAY(outPng.pixels);
        }
      }
  }
  // add end
    return 1;
}


int WrappedVulkan::SnapshotDraw()
{

    //if(!IsActiveCapturing(m_State))
    //  return true;

    //VkSwapchainKHR swap = VK_NULL_HANDLE;

    /*
      if(wnd)
      {
        {
          SCOPED_LOCK(m_SwapLookupLock);
          auto it = m_SwapLookup.find(wnd);
          if(it != m_SwapLookup.end())
            swap = it->second;
        }

        if(swap == VK_NULL_HANDLE)
        {
          RDCERR("Output window %p provided for frame capture corresponds with no known swap chain", wnd);
          return false;
        }
      }
      */

    VkImage backbuffer = VK_NULL_HANDLE;
    //VkResourceRecord *swaprecord = NULL;

    //if (swap != VK_NULL_HANDLE)
    //{
    //    GetResourceManager()->MarkResourceFrameReferenced(GetResID(swap), eFrameRef_Read);

    //    swaprecord = GetRecord(swap);
    //    RDCASSERT(swaprecord->swapInfo);

    //    const SwapchainInfo &swapInfo = *swaprecord->swapInfo;

    //    backbuffer = swapInfo.images[swapInfo.lastPresent].im;

    //    // mark all images referenced as well
    //    for (size_t i = 0; i < swapInfo.images.size(); i++)
    //        GetResourceManager()->MarkResourceFrameReferenced(GetResID(swapInfo.images[i].im),
    //            eFrameRef_Read);
    //}
    //else
    {
        // if a swapchain wasn't specified or found, use the last one presented
        //swaprecord = GetResourceManager()->GetResourceRecord(m_LastSwap);

        ////if (swaprecord)
        //{
        //    //GetResourceManager()->MarkResourceFrameReferenced(swaprecord->GetResourceID(), eFrameRef_Read);
        //    //RDCASSERT(swaprecord->swapInfo);

        //    const SwapchainInfo &swapInfo = m_CreationInfo.m_SwapChain[m_currentId];  // *swaprecord->swapInfo;

        //    backbuffer = swapInfo.images[swapInfo.lastPresent].im;

        //    // mark all images referenced as well
        //    for (size_t i = 0; i < swapInfo.images.size(); i++)
        //        GetResourceManager()->MarkResourceFrameReferenced(GetResID(swapInfo.images[i].im),
        //            eFrameRef_Read);
        //}
    }

    //// transition back to IDLE atomically
    //{
    //    //SCOPED_LOCK(m_CapTransitionLock);
    //    //EndCaptureFrame(backbuffer);

    //    //m_State = CaptureState::BackgroundCapturing;

    //    // m_SuccessfulCapture = false;

    //    //ObjDisp(GetDev())->DeviceWaitIdle(Unwrap(GetDev()));

    //    //{
    //    //    SCOPED_LOCK(m_CoherentMapsLock);
    //    //    for (auto it = m_CoherentMaps.begin(); it != m_CoherentMaps.end(); ++it)
    //    //    {
    //    //        FreeAlignedBuffer((*it)->memMapState->refData);
    //    //        (*it)->memMapState->refData = NULL;
    //    //        (*it)->memMapState->needRefData = false;
    //    //    }
    //    //}
    //}

    // gather backbuffer screenshot
    const uint32_t maxSize = 2048;
    RenderDoc::FramePixels fp;

    //if(swap != VK_NULL_HANDLE)
    //if (swaprecord != NULL)
    {
        VkDevice device = GetDev();
        VkCommandBuffer cmd = GetNextCmd();

        const VkLayerDispatchTable *vt = ObjDisp(device);

        vt->DeviceWaitIdle(Unwrap(device));

        //const SwapchainInfo &swapInfo = *swaprecord->swapInfo;
        const SwapchainInfo &swapInfo = m_CreationInfo.m_SwapChain[m_currentId];    // *swaprecord->swapInfo;

        backbuffer = swapInfo.images[swapInfo.lastPresent].im;

        // since this happens during capture, we don't want to start serialising extra buffer creates,
        // so we manually create & then just wrap.
        VkBuffer readbackBuf = VK_NULL_HANDLE;

        VkResult vkr = VK_SUCCESS;

        // create readback buffer
        VkBufferCreateInfo bufInfo = {
            VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
            NULL,
            0,
            GetByteSize(swapInfo.extent.width, swapInfo.extent.height, 1, swapInfo.format, 0),
            VK_BUFFER_USAGE_TRANSFER_DST_BIT,
        };
        vt->CreateBuffer(Unwrap(device), &bufInfo, NULL, &readbackBuf);
        RDCASSERTEQUAL(vkr, VK_SUCCESS);

        GetResourceManager()->WrapResource(Unwrap(device), readbackBuf);

        MemoryAllocation readbackMem =
            AllocateMemoryForResource(readbackBuf, MemoryScope::InitialContents, MemoryType::Readback);

        vkr = vt->BindBufferMemory(Unwrap(device), Unwrap(readbackBuf), Unwrap(readbackMem.mem),
            readbackMem.offs);
        RDCASSERTEQUAL(vkr, VK_SUCCESS);

        VkCommandBufferBeginInfo beginInfo = { VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, NULL,
                                              VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT };

        // do image copy
        vkr = vt->BeginCommandBuffer(Unwrap(cmd), &beginInfo);
        RDCASSERTEQUAL(vkr, VK_SUCCESS);

        uint32_t rowPitch = GetByteSize(swapInfo.extent.width, 1, 1, swapInfo.format, 0);

        VkBufferImageCopy cpy = {
            0,
            0,
            0,
            {VK_IMAGE_ASPECT_COLOR_BIT, 0, 0, 1},
            {
                0, 0, 0,
            },
            {swapInfo.extent.width, swapInfo.extent.height, 1},
        };

        uint32_t swapQueueIndex = m_ImageLayouts[GetResID(backbuffer)].queueFamilyIndex;

        VkImageMemoryBarrier bbBarrier = {
            VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
            NULL,
            0,
            VK_ACCESS_TRANSFER_READ_BIT,
            VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
            VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
            swapQueueIndex,
            m_QueueFamilyIdx,
            Unwrap(backbuffer),
            {VK_IMAGE_ASPECT_COLOR_BIT, 0, 1, 0, 1},
        };

        if (swapInfo.shared)
            bbBarrier.oldLayout = VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR;

        DoPipelineBarrier(cmd, 1, &bbBarrier);

        if (swapQueueIndex != m_QueueFamilyIdx)
        {
            VkCommandBuffer extQCmd = GetExtQueueCmd(swapQueueIndex);

            vkr = vt->BeginCommandBuffer(Unwrap(extQCmd), &beginInfo);
            RDCASSERTEQUAL(vkr, VK_SUCCESS);

            DoPipelineBarrier(extQCmd, 1, &bbBarrier);

            ObjDisp(extQCmd)->EndCommandBuffer(Unwrap(extQCmd));

            SubmitAndFlushExtQueue(swapQueueIndex);
        }

        vt->CmdCopyImageToBuffer(Unwrap(cmd), Unwrap(backbuffer), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
            Unwrap(readbackBuf), 1, &cpy);

        // barrier to switch backbuffer back to present layout
        std::swap(bbBarrier.oldLayout, bbBarrier.newLayout);
        std::swap(bbBarrier.srcAccessMask, bbBarrier.dstAccessMask);
        std::swap(bbBarrier.srcQueueFamilyIndex, bbBarrier.dstQueueFamilyIndex);

        VkBufferMemoryBarrier bufBarrier = {
            VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,
            NULL,
            VK_ACCESS_TRANSFER_WRITE_BIT,
            VK_ACCESS_HOST_READ_BIT,
            VK_QUEUE_FAMILY_IGNORED,
            VK_QUEUE_FAMILY_IGNORED,
            Unwrap(readbackBuf),
            0,
            bufInfo.size,
        };

        DoPipelineBarrier(cmd, 1, &bbBarrier);
        DoPipelineBarrier(cmd, 1, &bufBarrier);

        vkr = vt->EndCommandBuffer(Unwrap(cmd));
        RDCASSERTEQUAL(vkr, VK_SUCCESS);

        SubmitCmds();
        FlushQ();    // need to wait so we can readback

        if (swapQueueIndex != m_QueueFamilyIdx)
        {
            VkCommandBuffer extQCmd = GetExtQueueCmd(swapQueueIndex);

            vkr = vt->BeginCommandBuffer(Unwrap(extQCmd), &beginInfo);
            RDCASSERTEQUAL(vkr, VK_SUCCESS);

            DoPipelineBarrier(extQCmd, 1, &bbBarrier);

            ObjDisp(extQCmd)->EndCommandBuffer(Unwrap(extQCmd));

            SubmitAndFlushExtQueue(swapQueueIndex);
        }

        // map memory and readback
        byte *pData = NULL;
        vkr = vt->MapMemory(Unwrap(device), Unwrap(readbackMem.mem), readbackMem.offs, readbackMem.size,
            0, (void **)&pData);
        RDCASSERTEQUAL(vkr, VK_SUCCESS);
        RDCASSERT(pData != NULL);

        fp.len = (uint32_t)readbackMem.size;
        fp.data = new uint8_t[fp.len];
        memcpy(fp.data, pData, fp.len);

        VkMappedMemoryRange range = {
            VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
            NULL,
            Unwrap(readbackMem.mem),
            readbackMem.offs,
            readbackMem.size,
        };

        vkr = vt->InvalidateMappedMemoryRanges(Unwrap(device), 1, &range);
        RDCASSERTEQUAL(vkr, VK_SUCCESS);

        vt->UnmapMemory(Unwrap(device), Unwrap(readbackMem.mem));

        // delete all
        vt->DestroyBuffer(Unwrap(device), Unwrap(readbackBuf), NULL);
        GetResourceManager()->ReleaseWrappedResource(readbackBuf);

        ResourceFormat fmt = MakeResourceFormat(swapInfo.format);
        fp.width = swapInfo.extent.width;
        fp.height = swapInfo.extent.height;
        fp.pitch = rowPitch;
        fp.stride = fmt.compByteWidth * fmt.compCount;
        fp.bpc = fmt.compByteWidth;
        fp.bgra = fmt.BGRAOrder();
        fp.max_width = maxSize;
        fp.pitch_requirement = 8;
        switch (fmt.type)
        {
        case ResourceFormatType::R10G10B10A2:
            fp.stride = 4;
            fp.buf1010102 = true;
            break;
        case ResourceFormatType::R5G6B5:
            fp.stride = 2;
            fp.buf565 = true;
            break;
        case ResourceFormatType::R5G5B5A1:
            fp.stride = 2;
            fp.buf5551 = true;
            break;
        default: break;
        }

        //if (type == 1)
        {
            RDCThumb outRaw, outPng;
            if (fp.data)
            {
                // point sample info into raw buffer
                RenderDoc::Inst().ResamplePixels(fp, outRaw);
                RenderDoc::Inst().EncodePixelsPNG(outRaw, outPng);

                BinaryThumbnail2 thumbHeader = { 0 };

                thumbHeader.width = outPng.width;
                thumbHeader.height = outPng.height;
                const byte *jpgPixels = outPng.pixels;
                thumbHeader.length = outPng.len;

                byte *jpgBuffer = NULL;
                if (outPng.format != FileType::JPG && outPng.width > 0 && outPng.height > 0)
                {
                    // the primary thumbnail must be in JPG format, must perform conversion
                    const byte *rawPixels = NULL;
                    byte *rawBuffer = NULL;
                    int w = (int)outPng.width;
                    int h = (int)outPng.height;
                    int comp = 3;

                    if (outPng.format == FileType::Raw)
                    {
                        rawPixels = outPng.pixels;
                    }
                    else
                    {
                        rawBuffer = stbi_load_from_memory(outPng.pixels, (int)outPng.len, &w, &h, &comp, 3);
                        rawPixels = rawBuffer;
                    }

                    if (rawPixels)
                    {
                        int len = w * h * comp;
                        jpgBuffer = new byte[len];
                        jpge::params p;
                        p.m_quality = 90;
                        jpge::compress_image_to_jpeg_file_in_memory(jpgBuffer, len, w, h, comp, rawPixels, p);
                        thumbHeader.length = (uint32_t)len;
                        jpgPixels = jpgBuffer;
                    }
                    else
                    {
                        thumbHeader.width = 0;
                        thumbHeader.height = 0;
                        thumbHeader.length = 0;
                        jpgPixels = NULL;
                    }
                    if (rawBuffer)
                        stbi_image_free(rawBuffer);
                }

                {
                    if (thumbHeader.length > 0)
                    {
                        static int nSeq = 0;
                        char szFileName[256] = { 0 };
                        snprintf(szFileName, sizeof(szFileName),"E:\\pics\\%d.png", nSeq++);
                        //snprintf(szFileName, sizeof(szFileName), "/%d.png", nSeq++);
                        FILE *pFile = FileIO::fopen(szFileName, "wb");
                        FileIO::fwrite(jpgPixels, 1, thumbHeader.length, pFile);
                        FileIO::fclose(pFile);
                    }

                    delete[] jpgBuffer;
                }
                SAFE_DELETE_ARRAY(outRaw.pixels);
                SAFE_DELETE_ARRAY(outPng.pixels);
            }
        }
    }
    return 1;
}

    if (chunktype == VulkanChunk::vkQueueSubmit)
    {
        SnapshotDraw();
    }
\renderdoc\renderdoc\common\timing.h

struct BinaryThumbnail2
{
  // thumbnail width and height. If 0x0, no thumbnail data
  uint16_t width;
  uint16_t height;
  // number of bytes in thumbnail array below
  uint32_t length;
  // JPG compressed thumbnail
  byte data[1];
};

renderdoc\driver\vulkan\vk_core.h
  ResourceId m_currentId;
  // immutable creation data
  VulkanCreationInfo m_CreationInfo;
  
 renderdoc\driver\vulkan\wrappers\vk_wsi_funcs.cpp
  if(IsReplayingAndReading())
  {
      m_currentId = SwapChain;
    // use original ID because we don't create a live version of the swapchain
    SwapchainInfo &swapinfo = m_CreationInfo.m_SwapChain[SwapChain]; 



